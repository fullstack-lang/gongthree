// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongthree/go/db"
	"github.com/fullstack-lang/gongthree/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BezierSegment_sql sql.NullBool
var dummy_BezierSegment_time time.Duration
var dummy_BezierSegment_sort sort.Float64Slice

// BezierSegmentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beziersegmentAPI
type BezierSegmentAPI struct {
	gorm.Model

	models.BezierSegment_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BezierSegmentPointersEncoding BezierSegmentPointersEncoding
}

// BezierSegmentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BezierSegmentPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Start is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	StartID sql.NullInt64

	// field ControlPointStart is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ControlPointStartID sql.NullInt64

	// field ControlPointEnd is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ControlPointEndID sql.NullInt64

	// field End is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EndID sql.NullInt64
}

// BezierSegmentDB describes a beziersegment in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beziersegmentDB
type BezierSegmentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beziersegmentDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BezierSegmentPointersEncoding
}

// BezierSegmentDBs arrays beziersegmentDBs
// swagger:response beziersegmentDBsResponse
type BezierSegmentDBs []BezierSegmentDB

// BezierSegmentDBResponse provides response
// swagger:response beziersegmentDBResponse
type BezierSegmentDBResponse struct {
	BezierSegmentDB
}

// BezierSegmentWOP is a BezierSegment without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BezierSegmentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var BezierSegment_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBezierSegmentStruct struct {
	// stores BezierSegmentDB according to their gorm ID
	Map_BezierSegmentDBID_BezierSegmentDB map[uint]*BezierSegmentDB

	// stores BezierSegmentDB ID according to BezierSegment address
	Map_BezierSegmentPtr_BezierSegmentDBID map[*models.BezierSegment]uint

	// stores BezierSegment according to their gorm ID
	Map_BezierSegmentDBID_BezierSegmentPtr map[uint]*models.BezierSegment

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoBezierSegment *BackRepoBezierSegmentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBezierSegment.stage
	return
}

func (backRepoBezierSegment *BackRepoBezierSegmentStruct) GetDB() db.DBInterface {
	return backRepoBezierSegment.db
}

// GetBezierSegmentDBFromBezierSegmentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) GetBezierSegmentDBFromBezierSegmentPtr(beziersegment *models.BezierSegment) (beziersegmentDB *BezierSegmentDB) {
	id := backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment]
	beziersegmentDB = backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[id]
	return
}

// BackRepoBezierSegment.CommitPhaseOne commits all staged instances of BezierSegment to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beziersegment := range stage.BezierSegments {
		backRepoBezierSegment.CommitPhaseOneInstance(beziersegment)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beziersegment := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr {
		if _, ok := stage.BezierSegments[beziersegment]; !ok {
			backRepoBezierSegment.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBezierSegment.CommitDeleteInstance commits deletion of BezierSegment to the BackRepo
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CommitDeleteInstance(id uint) (Error error) {

	beziersegment := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[id]

	// beziersegment is not staged anymore, remove beziersegmentDB
	beziersegmentDB := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[id]
	db, _ := backRepoBezierSegment.db.Unscoped()
	_, err := db.Delete(beziersegmentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID, beziersegment)
	delete(backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr, id)
	delete(backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB, id)

	return
}

// BackRepoBezierSegment.CommitPhaseOneInstance commits beziersegment staged instances of BezierSegment to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CommitPhaseOneInstance(beziersegment *models.BezierSegment) (Error error) {

	// check if the beziersegment is not commited yet
	if _, ok := backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment]; ok {
		return
	}

	// initiate beziersegment
	var beziersegmentDB BezierSegmentDB
	beziersegmentDB.CopyBasicFieldsFromBezierSegment(beziersegment)

	_, err := backRepoBezierSegment.db.Create(&beziersegmentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment] = beziersegmentDB.ID
	backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[beziersegmentDB.ID] = beziersegment
	backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[beziersegmentDB.ID] = &beziersegmentDB

	return
}

// BackRepoBezierSegment.CommitPhaseTwo commits all staged instances of BezierSegment to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beziersegment := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr {
		backRepoBezierSegment.CommitPhaseTwoInstance(backRepo, idx, beziersegment)
	}

	return
}

// BackRepoBezierSegment.CommitPhaseTwoInstance commits {{structname }} of models.BezierSegment to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beziersegment *models.BezierSegment) (Error error) {

	// fetch matching beziersegmentDB
	if beziersegmentDB, ok := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[idx]; ok {

		beziersegmentDB.CopyBasicFieldsFromBezierSegment(beziersegment)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value beziersegment.Start translates to updating the beziersegment.StartID
		beziersegmentDB.StartID.Valid = true // allow for a 0 value (nil association)
		if beziersegment.Start != nil {
			if StartId, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[beziersegment.Start]; ok {
				beziersegmentDB.StartID.Int64 = int64(StartId)
				beziersegmentDB.StartID.Valid = true
			}
		} else {
			beziersegmentDB.StartID.Int64 = 0
			beziersegmentDB.StartID.Valid = true
		}

		// commit pointer value beziersegment.ControlPointStart translates to updating the beziersegment.ControlPointStartID
		beziersegmentDB.ControlPointStartID.Valid = true // allow for a 0 value (nil association)
		if beziersegment.ControlPointStart != nil {
			if ControlPointStartId, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[beziersegment.ControlPointStart]; ok {
				beziersegmentDB.ControlPointStartID.Int64 = int64(ControlPointStartId)
				beziersegmentDB.ControlPointStartID.Valid = true
			}
		} else {
			beziersegmentDB.ControlPointStartID.Int64 = 0
			beziersegmentDB.ControlPointStartID.Valid = true
		}

		// commit pointer value beziersegment.ControlPointEnd translates to updating the beziersegment.ControlPointEndID
		beziersegmentDB.ControlPointEndID.Valid = true // allow for a 0 value (nil association)
		if beziersegment.ControlPointEnd != nil {
			if ControlPointEndId, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[beziersegment.ControlPointEnd]; ok {
				beziersegmentDB.ControlPointEndID.Int64 = int64(ControlPointEndId)
				beziersegmentDB.ControlPointEndID.Valid = true
			}
		} else {
			beziersegmentDB.ControlPointEndID.Int64 = 0
			beziersegmentDB.ControlPointEndID.Valid = true
		}

		// commit pointer value beziersegment.End translates to updating the beziersegment.EndID
		beziersegmentDB.EndID.Valid = true // allow for a 0 value (nil association)
		if beziersegment.End != nil {
			if EndId, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[beziersegment.End]; ok {
				beziersegmentDB.EndID.Int64 = int64(EndId)
				beziersegmentDB.EndID.Valid = true
			}
		} else {
			beziersegmentDB.EndID.Int64 = 0
			beziersegmentDB.EndID.Valid = true
		}

		_, err := backRepoBezierSegment.db.Save(beziersegmentDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BezierSegment intance %s", beziersegment.Name))
		return err
	}

	return
}

// BackRepoBezierSegment.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CheckoutPhaseOne() (Error error) {

	beziersegmentDBArray := make([]BezierSegmentDB, 0)
	_, err := backRepoBezierSegment.db.Find(&beziersegmentDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beziersegmentInstancesToBeRemovedFromTheStage := make(map[*models.BezierSegment]any)
	for key, value := range backRepoBezierSegment.stage.BezierSegments {
		beziersegmentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beziersegmentDB := range beziersegmentDBArray {
		backRepoBezierSegment.CheckoutPhaseOneInstance(&beziersegmentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beziersegment, ok := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[beziersegmentDB.ID]
		if ok {
			delete(beziersegmentInstancesToBeRemovedFromTheStage, beziersegment)
		}
	}

	// remove from stage and back repo's 3 maps all beziersegments that are not in the checkout
	for beziersegment := range beziersegmentInstancesToBeRemovedFromTheStage {
		beziersegment.Unstage(backRepoBezierSegment.GetStage())

		// remove instance from the back repo 3 maps
		beziersegmentID := backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment]
		delete(backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID, beziersegment)
		delete(backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB, beziersegmentID)
		delete(backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr, beziersegmentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beziersegmentDB that has been found in the DB, updates the backRepo and stages the
// models version of the beziersegmentDB
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CheckoutPhaseOneInstance(beziersegmentDB *BezierSegmentDB) (Error error) {

	beziersegment, ok := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[beziersegmentDB.ID]
	if !ok {
		beziersegment = new(models.BezierSegment)

		backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[beziersegmentDB.ID] = beziersegment
		backRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment] = beziersegmentDB.ID

		// append model store with the new element
		beziersegment.Name = beziersegmentDB.Name_Data.String
		beziersegment.Stage(backRepoBezierSegment.GetStage())
	}
	beziersegmentDB.CopyBasicFieldsToBezierSegment(beziersegment)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beziersegment.Stage(backRepoBezierSegment.GetStage())

	// preserve pointer to beziersegmentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BezierSegmentDBID_BezierSegmentDB)[beziersegmentDB hold variable pointers
	beziersegmentDB_Data := *beziersegmentDB
	preservedPtrToBezierSegment := &beziersegmentDB_Data
	backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[beziersegmentDB.ID] = preservedPtrToBezierSegment

	return
}

// BackRepoBezierSegment.CheckoutPhaseTwo Checkouts all staged instances of BezierSegment to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beziersegmentDB := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB {
		backRepoBezierSegment.CheckoutPhaseTwoInstance(backRepo, beziersegmentDB)
	}
	return
}

// BackRepoBezierSegment.CheckoutPhaseTwoInstance Checkouts staged instances of BezierSegment to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beziersegmentDB *BezierSegmentDB) (Error error) {

	beziersegment := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[beziersegmentDB.ID]

	beziersegmentDB.DecodePointers(backRepo, beziersegment)

	return
}

func (beziersegmentDB *BezierSegmentDB) DecodePointers(backRepo *BackRepoStruct, beziersegment *models.BezierSegment) {

	// insertion point for checkout of pointer encoding
	// Start field	
	{
		id := beziersegmentDB.StartID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoVector2.Map_Vector2DBID_Vector2Ptr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: beziersegment.Start, unknown pointer id", id)
				beziersegment.Start = nil
			} else {
				// updates only if field has changed
				if beziersegment.Start == nil || beziersegment.Start != tmp {
					beziersegment.Start = tmp
				}
			}
		} else {
			beziersegment.Start = nil
		}
	}
	
	// ControlPointStart field	
	{
		id := beziersegmentDB.ControlPointStartID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoVector2.Map_Vector2DBID_Vector2Ptr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: beziersegment.ControlPointStart, unknown pointer id", id)
				beziersegment.ControlPointStart = nil
			} else {
				// updates only if field has changed
				if beziersegment.ControlPointStart == nil || beziersegment.ControlPointStart != tmp {
					beziersegment.ControlPointStart = tmp
				}
			}
		} else {
			beziersegment.ControlPointStart = nil
		}
	}
	
	// ControlPointEnd field	
	{
		id := beziersegmentDB.ControlPointEndID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoVector2.Map_Vector2DBID_Vector2Ptr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: beziersegment.ControlPointEnd, unknown pointer id", id)
				beziersegment.ControlPointEnd = nil
			} else {
				// updates only if field has changed
				if beziersegment.ControlPointEnd == nil || beziersegment.ControlPointEnd != tmp {
					beziersegment.ControlPointEnd = tmp
				}
			}
		} else {
			beziersegment.ControlPointEnd = nil
		}
	}
	
	// End field	
	{
		id := beziersegmentDB.EndID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoVector2.Map_Vector2DBID_Vector2Ptr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: beziersegment.End, unknown pointer id", id)
				beziersegment.End = nil
			} else {
				// updates only if field has changed
				if beziersegment.End == nil || beziersegment.End != tmp {
					beziersegment.End = tmp
				}
			}
		} else {
			beziersegment.End = nil
		}
	}
	
	return
}

// CommitBezierSegment allows commit of a single beziersegment (if already staged)
func (backRepo *BackRepoStruct) CommitBezierSegment(beziersegment *models.BezierSegment) {
	backRepo.BackRepoBezierSegment.CommitPhaseOneInstance(beziersegment)
	if id, ok := backRepo.BackRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment]; ok {
		backRepo.BackRepoBezierSegment.CommitPhaseTwoInstance(backRepo, id, beziersegment)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBezierSegment allows checkout of a single beziersegment (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBezierSegment(beziersegment *models.BezierSegment) {
	// check if the beziersegment is staged
	if _, ok := backRepo.BackRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment]; ok {

		if id, ok := backRepo.BackRepoBezierSegment.Map_BezierSegmentPtr_BezierSegmentDBID[beziersegment]; ok {
			var beziersegmentDB BezierSegmentDB
			beziersegmentDB.ID = id

			if _, err := backRepo.BackRepoBezierSegment.db.First(&beziersegmentDB, id); err != nil {
				log.Fatalln("CheckoutBezierSegment : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBezierSegment.CheckoutPhaseOneInstance(&beziersegmentDB)
			backRepo.BackRepoBezierSegment.CheckoutPhaseTwoInstance(backRepo, &beziersegmentDB)
		}
	}
}

// CopyBasicFieldsFromBezierSegment
func (beziersegmentDB *BezierSegmentDB) CopyBasicFieldsFromBezierSegment(beziersegment *models.BezierSegment) {
	// insertion point for fields commit

	beziersegmentDB.Name_Data.String = beziersegment.Name
	beziersegmentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBezierSegment_WOP
func (beziersegmentDB *BezierSegmentDB) CopyBasicFieldsFromBezierSegment_WOP(beziersegment *models.BezierSegment_WOP) {
	// insertion point for fields commit

	beziersegmentDB.Name_Data.String = beziersegment.Name
	beziersegmentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBezierSegmentWOP
func (beziersegmentDB *BezierSegmentDB) CopyBasicFieldsFromBezierSegmentWOP(beziersegment *BezierSegmentWOP) {
	// insertion point for fields commit

	beziersegmentDB.Name_Data.String = beziersegment.Name
	beziersegmentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBezierSegment
func (beziersegmentDB *BezierSegmentDB) CopyBasicFieldsToBezierSegment(beziersegment *models.BezierSegment) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziersegment.Name = beziersegmentDB.Name_Data.String
}

// CopyBasicFieldsToBezierSegment_WOP
func (beziersegmentDB *BezierSegmentDB) CopyBasicFieldsToBezierSegment_WOP(beziersegment *models.BezierSegment_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziersegment.Name = beziersegmentDB.Name_Data.String
}

// CopyBasicFieldsToBezierSegmentWOP
func (beziersegmentDB *BezierSegmentDB) CopyBasicFieldsToBezierSegmentWOP(beziersegment *BezierSegmentWOP) {
	beziersegment.ID = int(beziersegmentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beziersegment.Name = beziersegmentDB.Name_Data.String
}

// Backup generates a json file from a slice of all BezierSegmentDB instances in the backrepo
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BezierSegmentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierSegmentDB, 0)
	for _, beziersegmentDB := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB {
		forBackup = append(forBackup, beziersegmentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BezierSegment ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BezierSegment file", err.Error())
	}
}

// Backup generates a json file from a slice of all BezierSegmentDB instances in the backrepo
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierSegmentDB, 0)
	for _, beziersegmentDB := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB {
		forBackup = append(forBackup, beziersegmentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BezierSegment")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BezierSegment_Fields, -1)
	for _, beziersegmentDB := range forBackup {

		var beziersegmentWOP BezierSegmentWOP
		beziersegmentDB.CopyBasicFieldsToBezierSegmentWOP(&beziersegmentWOP)

		row := sh.AddRow()
		row.WriteStruct(&beziersegmentWOP, -1)
	}
}

// RestoreXL from the "BezierSegment" sheet all BezierSegmentDB instances
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBezierSegmentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BezierSegment"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBezierSegment.rowVisitorBezierSegment)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBezierSegment *BackRepoBezierSegmentStruct) rowVisitorBezierSegment(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beziersegmentWOP BezierSegmentWOP
		row.ReadStruct(&beziersegmentWOP)

		// add the unmarshalled struct to the stage
		beziersegmentDB := new(BezierSegmentDB)
		beziersegmentDB.CopyBasicFieldsFromBezierSegmentWOP(&beziersegmentWOP)

		beziersegmentDB_ID_atBackupTime := beziersegmentDB.ID
		beziersegmentDB.ID = 0
		_, err := backRepoBezierSegment.db.Create(beziersegmentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[beziersegmentDB.ID] = beziersegmentDB
		BackRepoBezierSegmentid_atBckpTime_newID[beziersegmentDB_ID_atBackupTime] = beziersegmentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BezierSegmentDB.json" in dirPath that stores an array
// of BezierSegmentDB and stores it in the database
// the map BackRepoBezierSegmentid_atBckpTime_newID is updated accordingly
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBezierSegmentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BezierSegmentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BezierSegment file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BezierSegmentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BezierSegmentDBID_BezierSegmentDB
	for _, beziersegmentDB := range forRestore {

		beziersegmentDB_ID_atBackupTime := beziersegmentDB.ID
		beziersegmentDB.ID = 0
		_, err := backRepoBezierSegment.db.Create(beziersegmentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[beziersegmentDB.ID] = beziersegmentDB
		BackRepoBezierSegmentid_atBckpTime_newID[beziersegmentDB_ID_atBackupTime] = beziersegmentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BezierSegment file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BezierSegment>id_atBckpTime_newID
// to compute new index
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) RestorePhaseTwo() {

	for _, beziersegmentDB := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB {

		// next line of code is to avert unused variable compilation error
		_ = beziersegmentDB

		// insertion point for reindexing pointers encoding
		// reindexing Start field
		if beziersegmentDB.StartID.Int64 != 0 {
			beziersegmentDB.StartID.Int64 = int64(BackRepoVector2id_atBckpTime_newID[uint(beziersegmentDB.StartID.Int64)])
			beziersegmentDB.StartID.Valid = true
		}

		// reindexing ControlPointStart field
		if beziersegmentDB.ControlPointStartID.Int64 != 0 {
			beziersegmentDB.ControlPointStartID.Int64 = int64(BackRepoVector2id_atBckpTime_newID[uint(beziersegmentDB.ControlPointStartID.Int64)])
			beziersegmentDB.ControlPointStartID.Valid = true
		}

		// reindexing ControlPointEnd field
		if beziersegmentDB.ControlPointEndID.Int64 != 0 {
			beziersegmentDB.ControlPointEndID.Int64 = int64(BackRepoVector2id_atBckpTime_newID[uint(beziersegmentDB.ControlPointEndID.Int64)])
			beziersegmentDB.ControlPointEndID.Valid = true
		}

		// reindexing End field
		if beziersegmentDB.EndID.Int64 != 0 {
			beziersegmentDB.EndID.Int64 = int64(BackRepoVector2id_atBckpTime_newID[uint(beziersegmentDB.EndID.Int64)])
			beziersegmentDB.EndID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoBezierSegment.db.Model(beziersegmentDB)
		_, err := db.Updates(*beziersegmentDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoBezierSegment.ResetReversePointers commits all staged instances of BezierSegment to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierSegment *BackRepoBezierSegmentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beziersegment := range backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr {
		backRepoBezierSegment.ResetReversePointersInstance(backRepo, idx, beziersegment)
	}

	return
}

func (backRepoBezierSegment *BackRepoBezierSegmentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beziersegment *models.BezierSegment) (Error error) {

	// fetch matching beziersegmentDB
	if beziersegmentDB, ok := backRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentDB[idx]; ok {
		_ = beziersegmentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBezierSegmentid_atBckpTime_newID map[uint]uint

// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongthree/go/db"
	"github.com/fullstack-lang/gongthree/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BezierCurve_sql sql.NullBool
var dummy_BezierCurve_time time.Duration
var dummy_BezierCurve_sort sort.Float64Slice

// BezierCurveAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beziercurveAPI
type BezierCurveAPI struct {
	gorm.Model

	models.BezierCurve_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BezierCurvePointersEncoding BezierCurvePointersEncoding
}

// BezierCurvePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BezierCurvePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field BezierSegments is a slice of pointers to another Struct (optional or 0..1)
	BezierSegments IntSlice `gorm:"type:TEXT"`
}

// BezierCurveDB describes a beziercurve in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beziercurveDB
type BezierCurveDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beziercurveDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BezierCurvePointersEncoding
}

// BezierCurveDBs arrays beziercurveDBs
// swagger:response beziercurveDBsResponse
type BezierCurveDBs []BezierCurveDB

// BezierCurveDBResponse provides response
// swagger:response beziercurveDBResponse
type BezierCurveDBResponse struct {
	BezierCurveDB
}

// BezierCurveWOP is a BezierCurve without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BezierCurveWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var BezierCurve_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBezierCurveStruct struct {
	// stores BezierCurveDB according to their gorm ID
	Map_BezierCurveDBID_BezierCurveDB map[uint]*BezierCurveDB

	// stores BezierCurveDB ID according to BezierCurve address
	Map_BezierCurvePtr_BezierCurveDBID map[*models.BezierCurve]uint

	// stores BezierCurve according to their gorm ID
	Map_BezierCurveDBID_BezierCurvePtr map[uint]*models.BezierCurve

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoBezierCurve *BackRepoBezierCurveStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBezierCurve.stage
	return
}

func (backRepoBezierCurve *BackRepoBezierCurveStruct) GetDB() db.DBInterface {
	return backRepoBezierCurve.db
}

// GetBezierCurveDBFromBezierCurvePtr is a handy function to access the back repo instance from the stage instance
func (backRepoBezierCurve *BackRepoBezierCurveStruct) GetBezierCurveDBFromBezierCurvePtr(beziercurve *models.BezierCurve) (beziercurveDB *BezierCurveDB) {
	id := backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve]
	beziercurveDB = backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[id]
	return
}

// BackRepoBezierCurve.CommitPhaseOne commits all staged instances of BezierCurve to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beziercurve := range stage.BezierCurves {
		backRepoBezierCurve.CommitPhaseOneInstance(beziercurve)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beziercurve := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr {
		if _, ok := stage.BezierCurves[beziercurve]; !ok {
			backRepoBezierCurve.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBezierCurve.CommitDeleteInstance commits deletion of BezierCurve to the BackRepo
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CommitDeleteInstance(id uint) (Error error) {

	beziercurve := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr[id]

	// beziercurve is not staged anymore, remove beziercurveDB
	beziercurveDB := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[id]
	db, _ := backRepoBezierCurve.db.Unscoped()
	_, err := db.Delete(beziercurveDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID, beziercurve)
	delete(backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr, id)
	delete(backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB, id)

	return
}

// BackRepoBezierCurve.CommitPhaseOneInstance commits beziercurve staged instances of BezierCurve to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CommitPhaseOneInstance(beziercurve *models.BezierCurve) (Error error) {

	// check if the beziercurve is not commited yet
	if _, ok := backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve]; ok {
		return
	}

	// initiate beziercurve
	var beziercurveDB BezierCurveDB
	beziercurveDB.CopyBasicFieldsFromBezierCurve(beziercurve)

	_, err := backRepoBezierCurve.db.Create(&beziercurveDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve] = beziercurveDB.ID
	backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr[beziercurveDB.ID] = beziercurve
	backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[beziercurveDB.ID] = &beziercurveDB

	return
}

// BackRepoBezierCurve.CommitPhaseTwo commits all staged instances of BezierCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beziercurve := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr {
		backRepoBezierCurve.CommitPhaseTwoInstance(backRepo, idx, beziercurve)
	}

	return
}

// BackRepoBezierCurve.CommitPhaseTwoInstance commits {{structname }} of models.BezierCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beziercurve *models.BezierCurve) (Error error) {

	// fetch matching beziercurveDB
	if beziercurveDB, ok := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[idx]; ok {

		beziercurveDB.CopyBasicFieldsFromBezierCurve(beziercurve)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		beziercurveDB.BezierCurvePointersEncoding.BezierSegments = make([]int, 0)
		// 2. encode
		for _, beziersegmentAssocEnd := range beziercurve.BezierSegments {
			beziersegmentAssocEnd_DB :=
				backRepo.BackRepoBezierSegment.GetBezierSegmentDBFromBezierSegmentPtr(beziersegmentAssocEnd)
			
			// the stage might be inconsistant, meaning that the beziersegmentAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if beziersegmentAssocEnd_DB == nil {
				continue
			}
			
			beziercurveDB.BezierCurvePointersEncoding.BezierSegments =
				append(beziercurveDB.BezierCurvePointersEncoding.BezierSegments, int(beziersegmentAssocEnd_DB.ID))
		}

		_, err := backRepoBezierCurve.db.Save(beziercurveDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BezierCurve intance %s", beziercurve.Name))
		return err
	}

	return
}

// BackRepoBezierCurve.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CheckoutPhaseOne() (Error error) {

	beziercurveDBArray := make([]BezierCurveDB, 0)
	_, err := backRepoBezierCurve.db.Find(&beziercurveDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beziercurveInstancesToBeRemovedFromTheStage := make(map[*models.BezierCurve]any)
	for key, value := range backRepoBezierCurve.stage.BezierCurves {
		beziercurveInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beziercurveDB := range beziercurveDBArray {
		backRepoBezierCurve.CheckoutPhaseOneInstance(&beziercurveDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beziercurve, ok := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr[beziercurveDB.ID]
		if ok {
			delete(beziercurveInstancesToBeRemovedFromTheStage, beziercurve)
		}
	}

	// remove from stage and back repo's 3 maps all beziercurves that are not in the checkout
	for beziercurve := range beziercurveInstancesToBeRemovedFromTheStage {
		beziercurve.Unstage(backRepoBezierCurve.GetStage())

		// remove instance from the back repo 3 maps
		beziercurveID := backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve]
		delete(backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID, beziercurve)
		delete(backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB, beziercurveID)
		delete(backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr, beziercurveID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beziercurveDB that has been found in the DB, updates the backRepo and stages the
// models version of the beziercurveDB
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CheckoutPhaseOneInstance(beziercurveDB *BezierCurveDB) (Error error) {

	beziercurve, ok := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr[beziercurveDB.ID]
	if !ok {
		beziercurve = new(models.BezierCurve)

		backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr[beziercurveDB.ID] = beziercurve
		backRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve] = beziercurveDB.ID

		// append model store with the new element
		beziercurve.Name = beziercurveDB.Name_Data.String
		beziercurve.Stage(backRepoBezierCurve.GetStage())
	}
	beziercurveDB.CopyBasicFieldsToBezierCurve(beziercurve)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beziercurve.Stage(backRepoBezierCurve.GetStage())

	// preserve pointer to beziercurveDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BezierCurveDBID_BezierCurveDB)[beziercurveDB hold variable pointers
	beziercurveDB_Data := *beziercurveDB
	preservedPtrToBezierCurve := &beziercurveDB_Data
	backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[beziercurveDB.ID] = preservedPtrToBezierCurve

	return
}

// BackRepoBezierCurve.CheckoutPhaseTwo Checkouts all staged instances of BezierCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beziercurveDB := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB {
		backRepoBezierCurve.CheckoutPhaseTwoInstance(backRepo, beziercurveDB)
	}
	return
}

// BackRepoBezierCurve.CheckoutPhaseTwoInstance Checkouts staged instances of BezierCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierCurve *BackRepoBezierCurveStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beziercurveDB *BezierCurveDB) (Error error) {

	beziercurve := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr[beziercurveDB.ID]

	beziercurveDB.DecodePointers(backRepo, beziercurve)

	return
}

func (beziercurveDB *BezierCurveDB) DecodePointers(backRepo *BackRepoStruct, beziercurve *models.BezierCurve) {

	// insertion point for checkout of pointer encoding
	// This loop redeem beziercurve.BezierSegments in the stage from the encode in the back repo
	// It parses all BezierSegmentDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	beziercurve.BezierSegments = beziercurve.BezierSegments[:0]
	for _, _BezierSegmentid := range beziercurveDB.BezierCurvePointersEncoding.BezierSegments {
		beziercurve.BezierSegments = append(beziercurve.BezierSegments, backRepo.BackRepoBezierSegment.Map_BezierSegmentDBID_BezierSegmentPtr[uint(_BezierSegmentid)])
	}

	return
}

// CommitBezierCurve allows commit of a single beziercurve (if already staged)
func (backRepo *BackRepoStruct) CommitBezierCurve(beziercurve *models.BezierCurve) {
	backRepo.BackRepoBezierCurve.CommitPhaseOneInstance(beziercurve)
	if id, ok := backRepo.BackRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve]; ok {
		backRepo.BackRepoBezierCurve.CommitPhaseTwoInstance(backRepo, id, beziercurve)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBezierCurve allows checkout of a single beziercurve (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBezierCurve(beziercurve *models.BezierCurve) {
	// check if the beziercurve is staged
	if _, ok := backRepo.BackRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve]; ok {

		if id, ok := backRepo.BackRepoBezierCurve.Map_BezierCurvePtr_BezierCurveDBID[beziercurve]; ok {
			var beziercurveDB BezierCurveDB
			beziercurveDB.ID = id

			if _, err := backRepo.BackRepoBezierCurve.db.First(&beziercurveDB, id); err != nil {
				log.Fatalln("CheckoutBezierCurve : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBezierCurve.CheckoutPhaseOneInstance(&beziercurveDB)
			backRepo.BackRepoBezierCurve.CheckoutPhaseTwoInstance(backRepo, &beziercurveDB)
		}
	}
}

// CopyBasicFieldsFromBezierCurve
func (beziercurveDB *BezierCurveDB) CopyBasicFieldsFromBezierCurve(beziercurve *models.BezierCurve) {
	// insertion point for fields commit

	beziercurveDB.Name_Data.String = beziercurve.Name
	beziercurveDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBezierCurve_WOP
func (beziercurveDB *BezierCurveDB) CopyBasicFieldsFromBezierCurve_WOP(beziercurve *models.BezierCurve_WOP) {
	// insertion point for fields commit

	beziercurveDB.Name_Data.String = beziercurve.Name
	beziercurveDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBezierCurveWOP
func (beziercurveDB *BezierCurveDB) CopyBasicFieldsFromBezierCurveWOP(beziercurve *BezierCurveWOP) {
	// insertion point for fields commit

	beziercurveDB.Name_Data.String = beziercurve.Name
	beziercurveDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBezierCurve
func (beziercurveDB *BezierCurveDB) CopyBasicFieldsToBezierCurve(beziercurve *models.BezierCurve) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziercurve.Name = beziercurveDB.Name_Data.String
}

// CopyBasicFieldsToBezierCurve_WOP
func (beziercurveDB *BezierCurveDB) CopyBasicFieldsToBezierCurve_WOP(beziercurve *models.BezierCurve_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beziercurve.Name = beziercurveDB.Name_Data.String
}

// CopyBasicFieldsToBezierCurveWOP
func (beziercurveDB *BezierCurveDB) CopyBasicFieldsToBezierCurveWOP(beziercurve *BezierCurveWOP) {
	beziercurve.ID = int(beziercurveDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beziercurve.Name = beziercurveDB.Name_Data.String
}

// Backup generates a json file from a slice of all BezierCurveDB instances in the backrepo
func (backRepoBezierCurve *BackRepoBezierCurveStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BezierCurveDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierCurveDB, 0)
	for _, beziercurveDB := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB {
		forBackup = append(forBackup, beziercurveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BezierCurve ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BezierCurve file", err.Error())
	}
}

// Backup generates a json file from a slice of all BezierCurveDB instances in the backrepo
func (backRepoBezierCurve *BackRepoBezierCurveStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BezierCurveDB, 0)
	for _, beziercurveDB := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB {
		forBackup = append(forBackup, beziercurveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BezierCurve")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BezierCurve_Fields, -1)
	for _, beziercurveDB := range forBackup {

		var beziercurveWOP BezierCurveWOP
		beziercurveDB.CopyBasicFieldsToBezierCurveWOP(&beziercurveWOP)

		row := sh.AddRow()
		row.WriteStruct(&beziercurveWOP, -1)
	}
}

// RestoreXL from the "BezierCurve" sheet all BezierCurveDB instances
func (backRepoBezierCurve *BackRepoBezierCurveStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBezierCurveid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BezierCurve"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBezierCurve.rowVisitorBezierCurve)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBezierCurve *BackRepoBezierCurveStruct) rowVisitorBezierCurve(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beziercurveWOP BezierCurveWOP
		row.ReadStruct(&beziercurveWOP)

		// add the unmarshalled struct to the stage
		beziercurveDB := new(BezierCurveDB)
		beziercurveDB.CopyBasicFieldsFromBezierCurveWOP(&beziercurveWOP)

		beziercurveDB_ID_atBackupTime := beziercurveDB.ID
		beziercurveDB.ID = 0
		_, err := backRepoBezierCurve.db.Create(beziercurveDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[beziercurveDB.ID] = beziercurveDB
		BackRepoBezierCurveid_atBckpTime_newID[beziercurveDB_ID_atBackupTime] = beziercurveDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BezierCurveDB.json" in dirPath that stores an array
// of BezierCurveDB and stores it in the database
// the map BackRepoBezierCurveid_atBckpTime_newID is updated accordingly
func (backRepoBezierCurve *BackRepoBezierCurveStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBezierCurveid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BezierCurveDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BezierCurve file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BezierCurveDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BezierCurveDBID_BezierCurveDB
	for _, beziercurveDB := range forRestore {

		beziercurveDB_ID_atBackupTime := beziercurveDB.ID
		beziercurveDB.ID = 0
		_, err := backRepoBezierCurve.db.Create(beziercurveDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[beziercurveDB.ID] = beziercurveDB
		BackRepoBezierCurveid_atBckpTime_newID[beziercurveDB_ID_atBackupTime] = beziercurveDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BezierCurve file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BezierCurve>id_atBckpTime_newID
// to compute new index
func (backRepoBezierCurve *BackRepoBezierCurveStruct) RestorePhaseTwo() {

	for _, beziercurveDB := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB {

		// next line of code is to avert unused variable compilation error
		_ = beziercurveDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoBezierCurve.db.Model(beziercurveDB)
		_, err := db.Updates(*beziercurveDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoBezierCurve.ResetReversePointers commits all staged instances of BezierCurve to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBezierCurve *BackRepoBezierCurveStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beziercurve := range backRepoBezierCurve.Map_BezierCurveDBID_BezierCurvePtr {
		backRepoBezierCurve.ResetReversePointersInstance(backRepo, idx, beziercurve)
	}

	return
}

func (backRepoBezierCurve *BackRepoBezierCurveStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beziercurve *models.BezierCurve) (Error error) {

	// fetch matching beziercurveDB
	if beziercurveDB, ok := backRepoBezierCurve.Map_BezierCurveDBID_BezierCurveDB[idx]; ok {
		_ = beziercurveDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBezierCurveid_atBckpTime_newID map[uint]uint

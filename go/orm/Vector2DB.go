// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongthree/go/db"
	"github.com/fullstack-lang/gongthree/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Vector2_sql sql.NullBool
var dummy_Vector2_time time.Duration
var dummy_Vector2_sort sort.Float64Slice

// Vector2API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model vector2API
type Vector2API struct {
	gorm.Model

	models.Vector2_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Vector2PointersEncoding Vector2PointersEncoding
}

// Vector2PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Vector2PointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Vector2DB describes a vector2 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model vector2DB
type Vector2DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field vector2DB.Name
	Name_Data sql.NullString

	// Declation for basic field vector2DB.X
	X_Data sql.NullFloat64

	// Declation for basic field vector2DB.Y
	Y_Data sql.NullFloat64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Vector2PointersEncoding
}

// Vector2DBs arrays vector2DBs
// swagger:response vector2DBsResponse
type Vector2DBs []Vector2DB

// Vector2DBResponse provides response
// swagger:response vector2DBResponse
type Vector2DBResponse struct {
	Vector2DB
}

// Vector2WOP is a Vector2 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Vector2WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	X float64 `xlsx:"2"`

	Y float64 `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Vector2_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"X",
	"Y",
}

type BackRepoVector2Struct struct {
	// stores Vector2DB according to their gorm ID
	Map_Vector2DBID_Vector2DB map[uint]*Vector2DB

	// stores Vector2DB ID according to Vector2 address
	Map_Vector2Ptr_Vector2DBID map[*models.Vector2]uint

	// stores Vector2 according to their gorm ID
	Map_Vector2DBID_Vector2Ptr map[uint]*models.Vector2

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoVector2 *BackRepoVector2Struct) GetStage() (stage *models.StageStruct) {
	stage = backRepoVector2.stage
	return
}

func (backRepoVector2 *BackRepoVector2Struct) GetDB() db.DBInterface {
	return backRepoVector2.db
}

// GetVector2DBFromVector2Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoVector2 *BackRepoVector2Struct) GetVector2DBFromVector2Ptr(vector2 *models.Vector2) (vector2DB *Vector2DB) {
	id := backRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2]
	vector2DB = backRepoVector2.Map_Vector2DBID_Vector2DB[id]
	return
}

// BackRepoVector2.CommitPhaseOne commits all staged instances of Vector2 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVector2 *BackRepoVector2Struct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for vector2 := range stage.Vector2s {
		backRepoVector2.CommitPhaseOneInstance(vector2)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, vector2 := range backRepoVector2.Map_Vector2DBID_Vector2Ptr {
		if _, ok := stage.Vector2s[vector2]; !ok {
			backRepoVector2.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVector2.CommitDeleteInstance commits deletion of Vector2 to the BackRepo
func (backRepoVector2 *BackRepoVector2Struct) CommitDeleteInstance(id uint) (Error error) {

	vector2 := backRepoVector2.Map_Vector2DBID_Vector2Ptr[id]

	// vector2 is not staged anymore, remove vector2DB
	vector2DB := backRepoVector2.Map_Vector2DBID_Vector2DB[id]
	db, _ := backRepoVector2.db.Unscoped()
	_, err := db.Delete(vector2DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoVector2.Map_Vector2Ptr_Vector2DBID, vector2)
	delete(backRepoVector2.Map_Vector2DBID_Vector2Ptr, id)
	delete(backRepoVector2.Map_Vector2DBID_Vector2DB, id)

	return
}

// BackRepoVector2.CommitPhaseOneInstance commits vector2 staged instances of Vector2 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVector2 *BackRepoVector2Struct) CommitPhaseOneInstance(vector2 *models.Vector2) (Error error) {

	// check if the vector2 is not commited yet
	if _, ok := backRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2]; ok {
		return
	}

	// initiate vector2
	var vector2DB Vector2DB
	vector2DB.CopyBasicFieldsFromVector2(vector2)

	_, err := backRepoVector2.db.Create(&vector2DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2] = vector2DB.ID
	backRepoVector2.Map_Vector2DBID_Vector2Ptr[vector2DB.ID] = vector2
	backRepoVector2.Map_Vector2DBID_Vector2DB[vector2DB.ID] = &vector2DB

	return
}

// BackRepoVector2.CommitPhaseTwo commits all staged instances of Vector2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVector2 *BackRepoVector2Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, vector2 := range backRepoVector2.Map_Vector2DBID_Vector2Ptr {
		backRepoVector2.CommitPhaseTwoInstance(backRepo, idx, vector2)
	}

	return
}

// BackRepoVector2.CommitPhaseTwoInstance commits {{structname }} of models.Vector2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVector2 *BackRepoVector2Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, vector2 *models.Vector2) (Error error) {

	// fetch matching vector2DB
	if vector2DB, ok := backRepoVector2.Map_Vector2DBID_Vector2DB[idx]; ok {

		vector2DB.CopyBasicFieldsFromVector2(vector2)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoVector2.db.Save(vector2DB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Vector2 intance %s", vector2.Name))
		return err
	}

	return
}

// BackRepoVector2.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoVector2 *BackRepoVector2Struct) CheckoutPhaseOne() (Error error) {

	vector2DBArray := make([]Vector2DB, 0)
	_, err := backRepoVector2.db.Find(&vector2DBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	vector2InstancesToBeRemovedFromTheStage := make(map[*models.Vector2]any)
	for key, value := range backRepoVector2.stage.Vector2s {
		vector2InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, vector2DB := range vector2DBArray {
		backRepoVector2.CheckoutPhaseOneInstance(&vector2DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		vector2, ok := backRepoVector2.Map_Vector2DBID_Vector2Ptr[vector2DB.ID]
		if ok {
			delete(vector2InstancesToBeRemovedFromTheStage, vector2)
		}
	}

	// remove from stage and back repo's 3 maps all vector2s that are not in the checkout
	for vector2 := range vector2InstancesToBeRemovedFromTheStage {
		vector2.Unstage(backRepoVector2.GetStage())

		// remove instance from the back repo 3 maps
		vector2ID := backRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2]
		delete(backRepoVector2.Map_Vector2Ptr_Vector2DBID, vector2)
		delete(backRepoVector2.Map_Vector2DBID_Vector2DB, vector2ID)
		delete(backRepoVector2.Map_Vector2DBID_Vector2Ptr, vector2ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a vector2DB that has been found in the DB, updates the backRepo and stages the
// models version of the vector2DB
func (backRepoVector2 *BackRepoVector2Struct) CheckoutPhaseOneInstance(vector2DB *Vector2DB) (Error error) {

	vector2, ok := backRepoVector2.Map_Vector2DBID_Vector2Ptr[vector2DB.ID]
	if !ok {
		vector2 = new(models.Vector2)

		backRepoVector2.Map_Vector2DBID_Vector2Ptr[vector2DB.ID] = vector2
		backRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2] = vector2DB.ID

		// append model store with the new element
		vector2.Name = vector2DB.Name_Data.String
		vector2.Stage(backRepoVector2.GetStage())
	}
	vector2DB.CopyBasicFieldsToVector2(vector2)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	vector2.Stage(backRepoVector2.GetStage())

	// preserve pointer to vector2DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Vector2DBID_Vector2DB)[vector2DB hold variable pointers
	vector2DB_Data := *vector2DB
	preservedPtrToVector2 := &vector2DB_Data
	backRepoVector2.Map_Vector2DBID_Vector2DB[vector2DB.ID] = preservedPtrToVector2

	return
}

// BackRepoVector2.CheckoutPhaseTwo Checkouts all staged instances of Vector2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVector2 *BackRepoVector2Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, vector2DB := range backRepoVector2.Map_Vector2DBID_Vector2DB {
		backRepoVector2.CheckoutPhaseTwoInstance(backRepo, vector2DB)
	}
	return
}

// BackRepoVector2.CheckoutPhaseTwoInstance Checkouts staged instances of Vector2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVector2 *BackRepoVector2Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, vector2DB *Vector2DB) (Error error) {

	vector2 := backRepoVector2.Map_Vector2DBID_Vector2Ptr[vector2DB.ID]

	vector2DB.DecodePointers(backRepo, vector2)

	return
}

func (vector2DB *Vector2DB) DecodePointers(backRepo *BackRepoStruct, vector2 *models.Vector2) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitVector2 allows commit of a single vector2 (if already staged)
func (backRepo *BackRepoStruct) CommitVector2(vector2 *models.Vector2) {
	backRepo.BackRepoVector2.CommitPhaseOneInstance(vector2)
	if id, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2]; ok {
		backRepo.BackRepoVector2.CommitPhaseTwoInstance(backRepo, id, vector2)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitVector2 allows checkout of a single vector2 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVector2(vector2 *models.Vector2) {
	// check if the vector2 is staged
	if _, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2]; ok {

		if id, ok := backRepo.BackRepoVector2.Map_Vector2Ptr_Vector2DBID[vector2]; ok {
			var vector2DB Vector2DB
			vector2DB.ID = id

			if _, err := backRepo.BackRepoVector2.db.First(&vector2DB, id); err != nil {
				log.Fatalln("CheckoutVector2 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVector2.CheckoutPhaseOneInstance(&vector2DB)
			backRepo.BackRepoVector2.CheckoutPhaseTwoInstance(backRepo, &vector2DB)
		}
	}
}

// CopyBasicFieldsFromVector2
func (vector2DB *Vector2DB) CopyBasicFieldsFromVector2(vector2 *models.Vector2) {
	// insertion point for fields commit

	vector2DB.Name_Data.String = vector2.Name
	vector2DB.Name_Data.Valid = true

	vector2DB.X_Data.Float64 = vector2.X
	vector2DB.X_Data.Valid = true

	vector2DB.Y_Data.Float64 = vector2.Y
	vector2DB.Y_Data.Valid = true
}

// CopyBasicFieldsFromVector2_WOP
func (vector2DB *Vector2DB) CopyBasicFieldsFromVector2_WOP(vector2 *models.Vector2_WOP) {
	// insertion point for fields commit

	vector2DB.Name_Data.String = vector2.Name
	vector2DB.Name_Data.Valid = true

	vector2DB.X_Data.Float64 = vector2.X
	vector2DB.X_Data.Valid = true

	vector2DB.Y_Data.Float64 = vector2.Y
	vector2DB.Y_Data.Valid = true
}

// CopyBasicFieldsFromVector2WOP
func (vector2DB *Vector2DB) CopyBasicFieldsFromVector2WOP(vector2 *Vector2WOP) {
	// insertion point for fields commit

	vector2DB.Name_Data.String = vector2.Name
	vector2DB.Name_Data.Valid = true

	vector2DB.X_Data.Float64 = vector2.X
	vector2DB.X_Data.Valid = true

	vector2DB.Y_Data.Float64 = vector2.Y
	vector2DB.Y_Data.Valid = true
}

// CopyBasicFieldsToVector2
func (vector2DB *Vector2DB) CopyBasicFieldsToVector2(vector2 *models.Vector2) {
	// insertion point for checkout of basic fields (back repo to stage)
	vector2.Name = vector2DB.Name_Data.String
	vector2.X = vector2DB.X_Data.Float64
	vector2.Y = vector2DB.Y_Data.Float64
}

// CopyBasicFieldsToVector2_WOP
func (vector2DB *Vector2DB) CopyBasicFieldsToVector2_WOP(vector2 *models.Vector2_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	vector2.Name = vector2DB.Name_Data.String
	vector2.X = vector2DB.X_Data.Float64
	vector2.Y = vector2DB.Y_Data.Float64
}

// CopyBasicFieldsToVector2WOP
func (vector2DB *Vector2DB) CopyBasicFieldsToVector2WOP(vector2 *Vector2WOP) {
	vector2.ID = int(vector2DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	vector2.Name = vector2DB.Name_Data.String
	vector2.X = vector2DB.X_Data.Float64
	vector2.Y = vector2DB.Y_Data.Float64
}

// Backup generates a json file from a slice of all Vector2DB instances in the backrepo
func (backRepoVector2 *BackRepoVector2Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Vector2DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Vector2DB, 0)
	for _, vector2DB := range backRepoVector2.Map_Vector2DBID_Vector2DB {
		forBackup = append(forBackup, vector2DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Vector2 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Vector2 file", err.Error())
	}
}

// Backup generates a json file from a slice of all Vector2DB instances in the backrepo
func (backRepoVector2 *BackRepoVector2Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Vector2DB, 0)
	for _, vector2DB := range backRepoVector2.Map_Vector2DBID_Vector2DB {
		forBackup = append(forBackup, vector2DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Vector2")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Vector2_Fields, -1)
	for _, vector2DB := range forBackup {

		var vector2WOP Vector2WOP
		vector2DB.CopyBasicFieldsToVector2WOP(&vector2WOP)

		row := sh.AddRow()
		row.WriteStruct(&vector2WOP, -1)
	}
}

// RestoreXL from the "Vector2" sheet all Vector2DB instances
func (backRepoVector2 *BackRepoVector2Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVector2id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Vector2"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVector2.rowVisitorVector2)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoVector2 *BackRepoVector2Struct) rowVisitorVector2(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var vector2WOP Vector2WOP
		row.ReadStruct(&vector2WOP)

		// add the unmarshalled struct to the stage
		vector2DB := new(Vector2DB)
		vector2DB.CopyBasicFieldsFromVector2WOP(&vector2WOP)

		vector2DB_ID_atBackupTime := vector2DB.ID
		vector2DB.ID = 0
		_, err := backRepoVector2.db.Create(vector2DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoVector2.Map_Vector2DBID_Vector2DB[vector2DB.ID] = vector2DB
		BackRepoVector2id_atBckpTime_newID[vector2DB_ID_atBackupTime] = vector2DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Vector2DB.json" in dirPath that stores an array
// of Vector2DB and stores it in the database
// the map BackRepoVector2id_atBckpTime_newID is updated accordingly
func (backRepoVector2 *BackRepoVector2Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVector2id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Vector2DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Vector2 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Vector2DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Vector2DBID_Vector2DB
	for _, vector2DB := range forRestore {

		vector2DB_ID_atBackupTime := vector2DB.ID
		vector2DB.ID = 0
		_, err := backRepoVector2.db.Create(vector2DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoVector2.Map_Vector2DBID_Vector2DB[vector2DB.ID] = vector2DB
		BackRepoVector2id_atBckpTime_newID[vector2DB_ID_atBackupTime] = vector2DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Vector2 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Vector2>id_atBckpTime_newID
// to compute new index
func (backRepoVector2 *BackRepoVector2Struct) RestorePhaseTwo() {

	for _, vector2DB := range backRepoVector2.Map_Vector2DBID_Vector2DB {

		// next line of code is to avert unused variable compilation error
		_ = vector2DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoVector2.db.Model(vector2DB)
		_, err := db.Updates(*vector2DB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoVector2.ResetReversePointers commits all staged instances of Vector2 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVector2 *BackRepoVector2Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, vector2 := range backRepoVector2.Map_Vector2DBID_Vector2Ptr {
		backRepoVector2.ResetReversePointersInstance(backRepo, idx, vector2)
	}

	return
}

func (backRepoVector2 *BackRepoVector2Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, vector2 *models.Vector2) (Error error) {

	// fetch matching vector2DB
	if vector2DB, ok := backRepoVector2.Map_Vector2DBID_Vector2DB[idx]; ok {
		_ = vector2DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVector2id_atBckpTime_newID map[uint]uint
